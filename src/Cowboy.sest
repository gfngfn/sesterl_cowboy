module Cowboy :> sig
  open Stdlib

  type req :: o

  type dispatch_table :: o

  type listener :: o

  type init_result :: (o) -> o

  type header = RawMap.t<binary, binary>

  type error_reason = RawValue.t

  signature Handler = sig
    val init<$msg, $state> : fun(req, $state) -> [$msg]init_result<$state>
  end

  val make_dispatch_table<$msg, $state> : fun(pack Handler, list<{binary, $state}>) -> result<dispatch_table, error_reason>

  val start_clear<$eff> : fun(-name binary, -port int, -dispatch dispatch_table) -> [$eff]result<listener, error_reason>

  val method : fun(req) -> binary

  val bindings : fun(req) -> RawMap.t<binary, binary>

  val parse_qs : fun(req) -> RawMap.t<binary, option<binary>>

  val reply<$a> : fun(int, header, binary, req) -> [$a]req

  val init_ok<$a, $state> : fun(req, $state) -> [$a]init_result<$state>

  val stop_listener<$a> : fun(binary) -> [$a]unit
end = struct
  open Stdlib

  type req =
    | ReqDummy

  type dispatch_table =
    | DispatchTableDummy

  type listener =
    | ListenerDummy

  type init_result<$state> =
    | InitResultDummy

  type header = RawMap.t<binary, binary>

  type error_reason = RawValue.t

  signature Handler = sig
    val init<$msg, $state> : fun(req, $state) -> [$msg]init_result<$state>
  end

  val make_dispatch_table<$msg, $state> : fun(pack Handler, list<{binary, $state}>) -> result<dispatch_table, error_reason>
  = external 2 ```
    make_dispatch_table(HandlerModule, Routes) ->
        try
            Dispatch =
                cowboy_router:compile([
                    {'_', lists:map(fun({Path, InitialState}) -> {Path, HandlerModule, InitialState} end, Routes)}
                ]),
            {ok, Dispatch}
        catch
            Class:Reason ->
                {error, {exception, Class, Reason}}
        end.
  ```

  val start_clear<$eff> : fun(-dispatch dispatch_table, -name binary, -port int) -> [$eff]result<listener, error_reason>
  = external 3 ```
    start_clear(Dispatch, NameBin, Port) ->
    %% Labeled parameters are in the alphabetical order
        cowboy:start_clear(
            erlang:binary_to_atom(NameBin, utf8),
            [{port, Port}],
            #{env => #{dispatch => Dispatch}}
        ).
        %% Return values are of `{ok, ListenerPid :: pid()} | {error, Reason :: term()}'
  ```

  val method : fun(req) -> binary = external 1 ```
    method(Req) ->
        cowboy_req:method(Req).
  ```

  val bindings : fun(req) -> RawMap.t<binary, binary> = external 1 ```
    bindings(Req) ->
        %% Bindings :: #{atom() => any()}
        Bindings = cowboy_req:bindings(Req),
        maps:fold(
            fun(AtomKey, Value, Acc) ->
                if
                    is_binary(Value) -> maps:put(erlang:atom_to_binary(AtomKey), Value, Acc);
                    true             -> Acc
                end
            end,
            #{},
            Bindings).
  ```

  val parse_qs : fun(req) -> RawMap.t<binary, option<binary>> = external 1 ```
    parse_qs(Req) ->
        Assoc = cowboy_req:parse_qs(Req),
        lists:foldl(
            fun({KeyBin, Value}, Map) ->
                case Value of
                    true     -> Map#{KeyBin => error};
                    ValueBin -> Map#{KeyBin => {ok, ValueBin}}
                end
            end,
            #{},
            Assoc).
  ```

  val reply<$a> : fun(int, header, binary, req) -> [$a]req = external 4 ```
    reply(StatusCode, Header, Body, Req) ->
        cowboy_req:reply(StatusCode, Header, Body, Req).
  ```

  val init_ok<$a, $state> : fun(req, $state) -> [$a]init_result<$state> = external 2 ```
    init_ok(Req, State) ->
        {ok, Req, State}.
  ```

  val stop_listener<$a> : fun(binary) -> [$a]unit = external 1 ```
    stop_listener(NameBin) ->
        _ = cowboy:stop_listener(erlang:binary_to_atom(NameBin, utf8)),
        ok.
  ```

end
